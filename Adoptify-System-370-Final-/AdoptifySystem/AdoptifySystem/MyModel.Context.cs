//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdoptifySystem
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Wollies_ShelterEntities : DbContext
    {
        public Wollies_ShelterEntities()
            : base("name=Wollies_ShelterEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Adopter> Adopters { get; set; }
        public virtual DbSet<Adopter_Contract> Adopter_Contract { get; set; }
        public virtual DbSet<Adopter_Relative> Adopter_Relative { get; set; }
        public virtual DbSet<Adopter_Status> Adopter_Status { get; set; }
        public virtual DbSet<Adoption> Adoptions { get; set; }
        public virtual DbSet<Adoption_Status> Adoption_Status { get; set; }
        public virtual DbSet<AdoptionPayment> AdoptionPayments { get; set; }
        public virtual DbSet<Animal> Animals { get; set; }
        public virtual DbSet<Animal_Breed> Animal_Breed { get; set; }
        public virtual DbSet<Animal_Kennel_History> Animal_Kennel_History { get; set; }
        public virtual DbSet<Animal_Status> Animal_Status { get; set; }
        public virtual DbSet<Animal_Treatment> Animal_Treatment { get; set; }
        public virtual DbSet<Animal_Type> Animal_Type { get; set; }
        public virtual DbSet<Audit_Log> Audit_Log { get; set; }
        public virtual DbSet<CrossBreed> CrossBreeds { get; set; }
        public virtual DbSet<Customer_Event> Customer_Event { get; set; }
        public virtual DbSet<Donation> Donations { get; set; }
        public virtual DbSet<Donation_Line> Donation_Line { get; set; }
        public virtual DbSet<Donation_Type> Donation_Type { get; set; }
        public virtual DbSet<Donor> Donors { get; set; }
        public virtual DbSet<Emp_Kennel> Emp_Kennel { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Employee_Status> Employee_Status { get; set; }
        public virtual DbSet<Employee_Type> Employee_Type { get; set; }
        public virtual DbSet<Event_> Event_ { get; set; }
        public virtual DbSet<Event_Schedule> Event_Schedule { get; set; }
        public virtual DbSet<Event_Type> Event_Type { get; set; }
        public virtual DbSet<Foster_Care> Foster_Care { get; set; }
        public virtual DbSet<Foster_Care_Parent> Foster_Care_Parent { get; set; }
        public virtual DbSet<GoogleChartData> GoogleChartDatas { get; set; }
        public virtual DbSet<HomeCheck> HomeChecks { get; set; }
        public virtual DbSet<Kennel> Kennels { get; set; }
        public virtual DbSet<Mecidal_Card> Mecidal_Card { get; set; }
        public virtual DbSet<Microchip> Microchips { get; set; }
        public virtual DbSet<Packaging_Type> Packaging_Type { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Payment_Type> Payment_Type { get; set; }
        public virtual DbSet<Role_> Role_ { get; set; }
        public virtual DbSet<Stock> Stocks { get; set; }
        public virtual DbSet<Stock_Type> Stock_Type { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TimeSheet> TimeSheets { get; set; }
        public virtual DbSet<Title> Titles { get; set; }
        public virtual DbSet<Unit_Type> Unit_Type { get; set; }
        public virtual DbSet<User_> User_ { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<Vet_Appointment> Vet_Appointment { get; set; }
        public virtual DbSet<Vet_Appointment_Master> Vet_Appointment_Master { get; set; }
        public virtual DbSet<VetAppReason> VetAppReasons { get; set; }
        public virtual DbSet<Veterinarian> Veterinarians { get; set; }
        public virtual DbSet<Volunteer> Volunteers { get; set; }
        public virtual DbSet<Volunteer_Hours> Volunteer_Hours { get; set; }
        public virtual DbSet<Volunteer_Work_Type> Volunteer_Work_Type { get; set; }
        public virtual DbSet<HomeCheckReport> HomeCheckReports { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Vet_SearchVet_Result> Vet_SearchVet(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vet_SearchVet_Result>("Vet_SearchVet", nameParameter);
        }
    
        public virtual ObjectResult<Veterinarian> VetSearch(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Veterinarian>("VetSearch", nameParameter);
        }
    
        public virtual ObjectResult<Veterinarian> VetSearch(string name, MergeOption mergeOption)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Veterinarian>("VetSearch", mergeOption, nameParameter);
        }
    }
}
